input {
  syslog {
    port  => 514
    codec => plain
    type  => "Fortilog"
  }
}
filter {
  if "Fortilog" in [type] {
    grok {
      match => [ "message", "%{FORTINET}" ]
      overwrite => [ "message" ]
    }
    kv {
      source => "message"
      field_split => " "
      add_field => [ "sourcetime", "%{date}:%{time}" ]
      add_tag => [ "Fortilog" ]
    }
    date {
      match => [ "sourcetime", "yyy-MM-dd:HH:mm:ss" ]
    }
    mutate {
      remove_field => [ "message", "sourcetime", "date", "time" ]
      # convert srcip, src, dstip, dst to src_ip, dst_ip
      rename => ["src", "src_ip"]
      rename => ["srcip", "src_ip"]
      rename => ["dst", "dst_ip"]
      rename => ["dstip", "dst_ip"]
      rename => ["remote_ip", "src_ip"]
    }

    # SPLIT IPV4 & IPV6
    if [src_ip] and [src_ip] =~ "[a-zA-Z]" {
      mutate {
        rename => ["src_ip", "src_ipv6"]
      }
    }
    if [dst_ip] and [dst_ip] =~ "[a-zA-Z]" {
      mutate {
        rename => ["dst_ip", "dst_ipv6"]
      }
    }
    # GEOIP
    if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
      geoip {
        source => "src_ip"
        target => "srcgeoip"
        add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][longitude]}" ]
        add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[srcgeoip][coordinates]", "float" ]
      }
    }
    if [dst_ip] and [dst_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
      geoip {
        source => "dst_ip"
        target => "dstgeoip"
        add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][longitude]}" ]
        add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][latitude]}"  ]
      }
    }
  }
}
output {
  elasticsearch {
    hosts => "elasticsearch-node"
    index => "firewalls-%{+YYYY.MM.dd}"
    template_name => "firewalls"
  }
}

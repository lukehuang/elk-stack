input {
    # JUNIPER LOGS
    syslog {
      port => 514
      codec => plain 
      type => "traffic"
    }
}
filter {
  if "traffic" in [type] {
    # JUNOS FLOW
    if "FLOW_REASSEMBLE" in [message]  {
      grok {
        match => [ "message", "%{JUNOS_SIMPLE}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
    if "RT_FLOW_SESSION" in [message] {
      # PARSE MSG
      grok {
        match => [ "message", "%{RT_FLOW2}" ]
        match => [ "message", "%{RT_FLOW3}" ]
        match => [ "message", "%{RT_FLOW1}" ]
        add_tag => [ "junos-traffic" ]
      }
      # GEOIP
      if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
          source => "src_ip"
          target => "srcgeoip"
          database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][longitude]}" ]
          add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[srcgeoip][coordinates]", "float" ]
        }
      }
      if [dst_ip] and [dst_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
          source => "dst_ip"
          target => "dstgeoip"
          database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][longitude]}" ]
          add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][latitude]}"  ]
        }
      }
      # SESSION FINGERPRINT  
      if [src_ip] and [dst_ip] {
        fingerprint {
          concatenate_sources => true
          method => "SHA1"
          key => "logstash"
          source => [ "src_ip", "dst_ip", "dst_port", "service" ]
        }
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      } 
    }

    # JUNOS CPU
    if "RTPERF_CPU" in [message] {
      grok {
        match => [ "message", "%{RTPERF_EVENT}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-system" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
 
    # JUNOS VPN
    if "KMD_VPN" in [message] {
      grok {
        match => [ "message", "%{KMD_VPN}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-vpn" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
    if "KMD_PM_SA_ESTABLISHED" in [message] {
      grok {
        match => [ "message", "%{KMD_SA}" ]
        remove_field => [ "message" ]
        add_tag => [ "junos-vpn" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
    if "IKE Phase-" in [message] {
      grok {
        match => [ "message", "%{IKEMSG1:message} %{IKEMSG1IP}" ]
        match => [ "message", "%{IKEMSG2:message} - %{IKEMSG2IP}" ]
        match => [ "message", "%{IKEMSG3:message} - %{IKEMSG3IP}" ]
        match => [ "message", "%{IKEMSG4:message} %{IKEMSG4IP}" ]
        match => [ "message", "%{IKEMSG5:message} - %{IKEMSG1IP}" ]
        match => [ "message", "%{GREEDYDATA:message}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-vpn" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }

    # JUNOS DYNAMIC VPN
    if "DYNAMIC_VPN" in [message] {
      grok {
        match => [ "message", "%{JUN_DVPNDEL}" ]
        match => [ "message", "%{JUN_DVPNSA}" ]
        match => [ "message", "%{JUN_DVPNLIC}" ]
        match => [ "message", "%{JUN_DVPNAOK}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-vpn" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }

    ## JUNOS IPSEC
    if "RT_IPSEC" in [message] {
      grok {
        match => [ "message", "%{IPSEC_REPLAY}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-vpn" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]	
      }
    }
    ## JUNOS CFG AUDIT
    if "UI_CFG" in [message] or "UI_LOAD_EVENT" in [message] or "UI_DBASE" in [message] {
      grok {
        match => [ "message", "%{UI_CFG1}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-ui" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
    if "UI_LOAD_JUNOS_DEFAULT_FILE_EVENT" in [message] or "UI_COMMIT" in [message] {
      grok {
        match => [ "message", "%{UI_CFG2}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-ui" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
    # END JUNOS CONFIG AUDIT

    if "PFE_FW_SYSLOG_IP" in [message] {
      grok {
        match => [ "message", "%{PFE_SYSIP}" ]
        remove_field => [ "message" ]
        add_tag => [ "junos-ids" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }

    if "nh_walk_chek_max_num_tag" in [message] {
      grok {
        match => [ "message", "%{JUN_GENERIC2}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-unknown" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }

    ### ALL UNMATCHED JUNIPER GOES HERE
    if ![tags] {
      grok {
        match => [ "message", "%{JUNOS_SIMPLE}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-default" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
  } # END OF TRAFFIC TYPE
}

output {
  if "traffic" in [type] {
    elasticsearch {
      host => "es-1"
      cluster => "elasticsearch"
      protocol => "http"
      index => "firewall-%{+YYYY.MM.dd}"
      template_name => "firewall"
    }
  }
}

input {
}

filter {
    # JUNOS FLOW
    if "FLOW_REASSEMBLE" in [message]  {
      grok {
        match => [ "message", "%{REASSEMBLE}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }
    if "RT_FLOW_SESSION" in [message] {
      # PARSE MSG
      grok {
        match => [ "message", "%{RT_FLOW2}" ]
        match => [ "message", "%{RT_FLOW3}" ]
        match => [ "message", "%{RT_FLOW1}" ]
      }
      # GEOIP
      if [src-ip] and [src-ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
          source => "src-ip"
          target => "srcgeoip"
          database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][longitude]}" ]
          add_field => [ "[srcgeoip][coordinates]", "%{[srcgeoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[srcgeoip][coordinates]", "float" ]
        }
      }
      if [dst-ip] and [dst-ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
        geoip {
          source => "dst-ip"
          target => "dstgeoip"
          database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][longitude]}" ]
          add_field => [ "[dstgeoip][coordinates]", "%{[dstgeoip][latitude]}"  ]
        }
      }
      # SESSION FINGERPRINT  
      if [src-ip] and [dst-ip] {
        fingerprint {
          concatenate_sources => true
          method => "SHA1"
          key => "logstash"
          source => [ "src-ip", "dst-ip", "dst-port", "service" ]
        }
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      } 
      # FINAL TRANSFORM
      mutate {
        remove_field => [ "message", "timestamp" ]
      }
    }

    # IDS
    if "RT_IDS" in [message] {
      grok {
        match => [ "message", "%{IDS_EVENT}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }

    # JUNOS PING TEST
    if "PING_TEST" in [message] {
      grok {
        match => [ "message", "%{JUN_GENERIC}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }
    #END JUNOS PING TEST

    # JUNOS CPU
    if "RTPERF_CPU_THRESHOLD_EXCEEDED" in [message] {
      grok {
        match => [ "message", "%{RTPERF_CPU2}" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "message" ]
      }
    }
    if "RTPERF_CPU_USAGE_OK" in [message] {
      grok {
        match => [ "message", "%{RTPERF_CPU1}" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "message" ]
      }
    }
 
    # JUNOS VPN
    if "KMD_VPN" in [message] {
      grok {
        match => [ "message", "%{KMD_VPN}" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "message" ]
      }
    }
    if "KMD_PM_SA_ESTABLISHED" in [message] {
      grok {
        match => [ "message", "%{KMD_SA}" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "message" ]
      }
    }

    ## JUNOS IPSEC BAD SPI
#    if "RT_IPSEC" in [message] {
      #grok {
      #  match => [ "message", "%{IPSEC_BADSPI}" ]
      #  match => [ "message", "%{IPSEC_REPLAY}" ]
      #  overwrite => [ "message" ]
      #}
      # TIMESTAMP REPLACE
      #date {
      #  match => [ "timestamp", "MMM dd HH:mm:ss" ]
      #}
    #}
    ## JUNOS CFG AUDIT
    if "UI_CFG" in [message] or "UI_LOAD_EVENT" in [message] or "UI_DBASE" in [message] {
      grok {
        match => [ "message", "%{UI_CFG1}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-ui" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "timestamp" ]
      }
    }
    if "UI_LOAD_JUNOS_DEFAULT_FILE_EVENT" in [message] or "UI_COMMIT" in [message] {
      grok {
        match => [ "message", "%{UI_CFG2}" ]
        overwrite => [ "message" ]
        add_tag => [ "junos-ui" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => [ "timestamp" ]
      }
    }
    # END JUNOS CONFIG AUDIT

    if "PFE_FW_SYSLOG_IP" in [message] {
      grok {
        match => [ "message", "%{PFE_SYSIP}" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
      mutate {
        remove_field => "message"
      }
    }

    if "IFP" in [message] {
     grok {
       match => [ "message", "%{IFP_TRACE}" ]
       overwrite => [ "message" ]
     }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }
    if "nh_walk_chek_max_num_tag" in [message] {
      grok {
        match => [ "message", "%{JUN_GENERIC2}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }
    if "KERN_ARP_ADDR_CHANGE" in [message] {
      grok {
        match => [ "message", "%{JUN_GENERIC3}" ]
        overwrite => [ "message" ]
      }
      # TIMESTAMP REPLACE
      date {
        match => [ "timestamp", "MMM dd HH:mm:ss" ]
      }
    }
}

output {
}
